{"version":3,"sources":["components/Header.js","components/Card.js","components/Column.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Card","updateField","React","createRef","openEditForm","e","displayState","state","showInput","setState","editCard","theID","preventDefault","fetch","method","headers","body","current","value","then","cardContent","fetchLikesCount","id","a","async","likes","likesCount","JSON","stringify","console","error","deleteCard","cardID","displayUpdatedCards","this","style","backgroundColor","color","onClick","onSubmit","placeholder","borderColor","type","ref","name","Component","Column","contentRef","categoryRef","shouldDisplayForm","displayForm","createCard","content","category","response","json","result","newCard","_id","allCards","items","cardsFiltered","filter","el","data","catch","niceName","map","item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a654c38b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => (\r\n  <header className=\"top col-12\">\r\n    <h1>Retrospective</h1>\r\n    <h3>This is a scrum retrospective app built using the MERN stack. Due to costs constraints, it's using a single Mongo database that deletes all records after 2 hours. </h3>\r\n    <p>To add a card of a retrospective, click on the '+' of the column, type the content and press Enter. You can also edit, delete and 'like' a card using the icons.</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { FaPencilAlt } from \"react-icons/fa\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FaHeart } from \"react-icons/fa\";\r\n\r\nclass Card extends React.Component {\r\n    updateField = React.createRef();\r\n    constructor(props){\r\n        super(props);\r\n        this.state  ={\r\n          showInput: false,\r\n          likesCount: 0,\r\n          cardContent: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n      this.setState({        \r\n        likesCount: this.props.likes,\r\n        cardContent: this.props.cardContent\r\n      })\r\n    }\r\n\r\n    openEditForm = (e) =>{\r\n    let displayState = this.state.showInput ? false : true;    \r\n    this.setState({\r\n      showInput: displayState\r\n    })\r\n  }\r\n  \r\n  editCard = (e, theID) =>{\r\n    e.preventDefault();    \r\n    fetch(`https://guarded-spire-19484.herokuapp.com/edit/${theID}`, {\r\n      method: 'PATCH',\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: `update=${this.updateField.current.value}`\r\n    }).then(()=>{/*\r\n      var cardsFiltered = this.props.items.filter(el =>{  \r\n        if(el._id === theID){\r\n          el.content = this.updateField.current.value\r\n        }\r\n        return el;\r\n      });*/\r\n      //this.props.displayUpdatedCards(cardsFiltered);\r\n      this.setState({\r\n        cardContent: this.updateField.current.value\r\n      })\r\n      this.updateField.current.value = '';\r\n      this.setState({\r\n        showInput: false\r\n      })\r\n      } \r\n    )\r\n  }\r\n  fetchLikesCount = async (id) => {\r\n    let likes = this.state.likesCount + 1;\r\n    this.setState({\r\n      likesCount: likes\r\n    })\r\n\r\n    try {\r\n      await fetch(`https://guarded-spire-19484.herokuapp.com/updatelikes/${id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          likes: this.state.likesCount\r\n        })\r\n      });\r\n    } catch (error) {\r\n      console.error('Error', error);\r\n    }\r\n  }\r\n\r\n  deleteCard = (cardID) => {\r\n    fetch(`https://guarded-spire-19484.herokuapp.com/deletecard/${cardID}`, {\r\n      method: 'DELETE'\r\n    }).then(() =>{\r\n        this.props.displayUpdatedCards(cardID);\r\n    })\r\n\r\n  }\r\n\r\n    render (){\r\n        return(\r\n        <div style={{backgroundColor: this.props.color}} className=\"card\">\r\n            {this.state.cardContent}\r\n            <div className=\"options-container\">\r\n            <FaPencilAlt className=\"icon edit-icon\" color=\"white\" onClick={this.openEditForm} id=\"edit\"/>\r\n            <FaTrashAlt onClick={(e)=>{this.deleteCard(this.props.id)}}  className=\"icon trash-icon\" color=\"white\"/>\r\n            <FaHeart onClick={()=>{this.fetchLikesCount(this.props.id)}} className=\"icon heart-icon\" color=\"white\"/>            \r\n            <span style={{color: 'white'}}>{this.state.likesCount}</span>\r\n            </div>\r\n            <form onSubmit={(e)=> this.editCard(e, this.props.id)}>\r\n                <input placeholder=\"Editar tarjeta\" style={{borderColor: this.props.color}} className={`form-update ${this.state.showInput ? 'd-block' : 'd-none'}`} type=\"text\" ref={this.updateField} name=\"update\"/>\r\n            </form>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\n/*load all matching items and map'em inside*/\r\n\r\nclass Column extends React.Component {  \r\n  contentRef = React.createRef();  \r\n  categoryRef = React.createRef();\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      items: [],\r\n      displayForm: false\r\n    }  \r\n  }\r\n  componentDidMount(){\r\n    fetch('https://guarded-spire-19484.herokuapp.com/getcard/'+ this.props.category)\r\n    .then(response => response.json())\r\n    .then(data => {        \r\n        this.setState ({\r\n            items: data\r\n        })\r\n    }).catch(error => console.error(error));    \r\n  }\r\n  \r\n  shouldDisplayForm = (e) =>{\r\n    let displayState = this.state.displayForm ? false : true;    \r\n    this.setState ({\r\n      displayForm: displayState\r\n    })\r\n  }\r\n  createCard = async (e)=>{\r\n      e.preventDefault();\r\n      try {\r\n        const response = await fetch('https://guarded-spire-19484.herokuapp.com/createcard', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            content: this.contentRef.current.value, \r\n            category: this.categoryRef.current.value,\r\n            likes: 0, \r\n            color:this.props.color})\r\n        });\r\n        const result = await response.json();\r\n        //console.log('Success:', JSON.stringify(result));\r\n        let newCard = { _id:result._id, content: this.contentRef.current.value, category: this.categoryRef.current.value, likes:0, color:this.props.color}\r\n        let allCards = [...this.state.items, newCard];\r\n        this.setState ({\r\n          items: allCards,\r\n          displayForm: false\r\n        })\r\n        this.contentRef.current.value= '';\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n\r\n/*      fetch('https://guarded-spire-19484.herokuapp.com/createcard', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        content: this.contentRef.current.value, \r\n        category: this.categoryRef.current.value, \r\n        color:this.props.color})\r\n    }).then(data => {      \r\n    let newCard = { _id:data._id, content: this.contentRef.current.value, category: this.categoryRef.current.value, color:this.props.color}\r\n    let allCards = [...this.state.items, newCard];\r\n    this.setState ({\r\n      items: allCards\r\n    })\r\n    this.contentRef.current.value= '';\r\n    }).catch(error => console.error(error));    */\r\n  }\r\n\r\n  displayUpdatedCards = (cardID) =>{\r\n    let cardsFiltered = this.state.items.filter(el => {\r\n      if(el._id === cardID){\r\n        el = null;\r\n      }\r\n      return el;\r\n    })\r\n\r\n    this.setState ({\r\n      items: cardsFiltered\r\n    })    \r\n  }\r\n  render() {\r\n      return <div className=\"col-sm-4 action-container\">\r\n        <h2>{this.props.niceName}</h2>\r\n        <div className=\"add-card-span\" onClick={this.shouldDisplayForm}>+</div>\r\n          <form className={`form-create ${this.state.displayForm ? 'd-block' : 'd-none'}`} onSubmit={this.createCard}>\r\n            <input placeholder=\"Type the card content and press enter\" type=\"text\" className=\"input-create\" style={{borderColor: this.props.color}} ref={this.contentRef} name=\"content\"/>\r\n            <input type=\"hidden\" name=\"category\" ref={this.categoryRef} value={this.props.category}/>\r\n          </form>\r\n          <div className=\"cards-container\">\r\n          {this.state.items.map((item) =>\r\n            <Card displayUpdatedCards={this.displayUpdatedCards} likes={item.likes} color={item.color} cardContent={item.content} id={item._id} key={item._id}></Card>\r\n            )}\r\n          </div>\r\n      </div>\r\n    }\r\n  }\r\n  \r\n  export default Column;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Column from './components/Column';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <div className=\"container-fluid\">\n        <div className=\"row\">   \n        <Column color=\"orchid\" niceName='Kudos' category='kudos'></Column>\n        <Column color=\"salmon\" niceName='To Improve' category='toImprove'></Column>\n        <Column color=\"aquamarine\" niceName='Went Well' category='wentWell'></Column> \n        </div>\n      </div>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}